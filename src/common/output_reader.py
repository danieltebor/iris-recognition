# -*- coding: utf-8 -*-
"""
Module: output_reader.py
Author: Daniel Tebor
Description: This module contains a class for reading from the output directory.
"""

import json
import logging
import os
import pickle
from collections import OrderedDict

import h5py
import torch


class OutputReader:
    """
    A class for reading output files generated by the DeepL Blink Detection model.

    Methods:
        __init__(self, base_dir='./out'): Initializes an OutputReader object with a base directory.
        _read_json_file(self, filename: str, subdir: str, model_filebasename: str = None): Reads data from a JSON file.
        read_data(self, filename: str, model_filebasename: str): Reads data from a JSON file.
        read_label_encoder(self, filename: str): Reads a label encoder from a file and returns it.
        read_metadata(self, filename: str, model_filebasename: str): Reads metadata from a JSON file.
        read_model(self, filename: str) -> OrderedDict: Loads the state dictionary of a PyTorch model from a file.
        get_model_files(self) -> list[str]: Returns a list of all the model files in the output directory.

    Args:
        base_dir (str): The base directory where the output files are stored.
    """

    def __init__(self, base_dir='./out'):
        self._base_dir = base_dir

    def _read_json_file(self, filename: str, subdir: str, model_filebasename: str = None):
        out_path = os.path.join(self._base_dir, subdir)
        if model_filebasename is not None:
            out_path = os.path.join(out_path, model_filebasename)
        file_path = os.path.join(out_path, filename)

        if not os.path.isfile(file_path):
            raise FileNotFoundError(f'File "{file_path}" does not exist')

        with open(file_path, 'r') as f:
            file_contents = json.load(f)

            log = logging.getLogger(__name__)
            log.info(f'Loaded JSON file "{filename}" from "{out_path}"')

            return file_contents

    def read_data(self, filename: str, model_filebasename: str):
        """
        Reads data from a JSON file.

        Args:
            filename (str): The name of the file to read from.
            model_filebasename (str): The base name of the model file.

        Returns:
            The data read from the file.
        """

        return self._read_json_file(filename, 'data', model_filebasename)
    
    def read_hd5_data(self, filename: str, model_filebasename: str, dataset_name: str, start: int = None, end: int = None):
        """
        Reads data from a HD5 file.

        Args:
            filename (str): The name of the file to read from.
            model_filebasename (str): The base name of the model file.

        Returns:
            The data read from the file.
        """

        out_path = os.path.join(self._base_dir, 'data', model_filebasename)
        file_path = os.path.join(out_path, filename)

        if not os.path.isfile(file_path):
            raise FileNotFoundError(f'File "{file_path}" does not exist')

        with h5py.File(file_path, 'r') as f:
            if start is None and end is None:
                data = f[dataset_name][:]
            elif start is None:
                data = f[dataset_name][:end]
            elif end is None:
                data = f[dataset_name][start:]
            else:
                data = f[dataset_name][start:end]

            log = logging.getLogger(__name__)
            log.info(f'Loaded HD5 file "{filename}" from "{out_path}"')

            return data

    def get_data_files(self, model_filebasename: str) -> list[str]:
        """
        Returns a list of all the data files in the output directory.

        Returns:
            list[str]: A list of all the data files in the output directory.
        """

        return os.listdir(os.path.join(self._base_dir, 'data', model_filebasename))

    def read_label_encoder(self, filename: str):
        """
        Reads a label encoder from a file and returns it.

        Args:
            filename (str): The name of the file containing the label encoder.

        Returns:
            The label encoder object loaded from the file.

        Raises:
            FileNotFoundError: If the specified file does not exist.
        """

        out_path = os.path.join(self._base_dir, 'label_encoder')
        file_path = os.path.join(out_path, filename)
        if not os.path.isfile(file_path):
            raise FileNotFoundError(f'File "{file_path}" does not exist')
        
        with open(file_path, 'rb') as f:
            file_contents = pickle.load(f)

            log = logging.getLogger(__name__)
            log.info(f'Loaded label encoder "{filename}" from "{out_path}"')

            return file_contents

    def read_metadata(self, filename: str, model_filebasename: str):
        """
        Reads metadata from a JSON file.

        Args:
            filename (str): The name of the file to read from.
            model_filebasename (str): The basename of the model file.

        Returns:
            The metadata read from the file.
        """

        return self._read_json_file(filename, 'metadata', model_filebasename)

    def read_model(self, filename: str) -> OrderedDict:
        """
        Loads the state dictionary of a PyTorch model from a file.

        Args:
            file_name (str): The name of the file containing the state dict.

        Returns:
            OrderedDict: The loaded state dict.
        """

        out_path = os.path.join(self._base_dir, 'model')
        file_path = os.path.join(out_path, filename)
        if not os.path.isfile(file_path):
            raise FileNotFoundError(f'File "{file_path}" not found')

        state_dict = torch.load(file_path)

        log = logging.getLogger(__name__)
        log.info(f'Loaded model state dict from "{filename}" in "{out_path}"')

        return state_dict
    
    def get_model_files(self) -> list[str]:
        """
        Returns a list of all the model files in the output directory.

        Returns:
            list[str]: A list of all the model files in the output directory.
        """
        return os.listdir(os.path.join(self._base_dir, 'model'))
    
    @property
    def out_dir(self) -> str:
        return self._base_dir
    
    @property
    def data_dir(self) -> str:
        return self._base_dir + '/data'
    
    @property
    def fig_dir(self) -> str:
        return self._base_dir + '/fig'
    
    @property
    def label_encoder_dir(self) -> str:
        return self._base_dir + '/label_encoder'
    
    @property
    def metadata_dir(self) -> str:
        return self._base_dir + '/metadata'
    
    @property
    def model_dir(self) -> str:
        return self._base_dir + '/model'